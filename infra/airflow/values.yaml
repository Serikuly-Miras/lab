fernetKeySecretName: airflow-vault-secret
webserverSecretKeySecretName: airflow-vault-secret
executor: KubernetesExecutor
data:
  metadataSecretName: airflow-vault-secret
dags:
  gitSync:
    enabled: true
    repo: https://github.com/Serikuly-Miras/lab.git
    branch: main
    rev: HEAD
    ref: main
    depth: 4
    subPath: "dags"
webserver:
  defaultUser:
    enabled: false
triggerer:
  persistence:
    enabled: true
    size: 25Gi
logs:
  persistence:
    enabled: true
    existingClaim: airflow-logs-pvc
postgresql:
  enabled: false
pgbouncer:
  enabled: true
  metadataPoolSize: 5
config:
  core:
    xcom_backend: airflow.providers.common.io.xcom.backend.XComObjectStorageBackend
  common.io:
    xcom_objectstorage_path: s3://seaweedfs@airflow/xcoms
    xcom_objectstorage_threshold: "0"
    xcom_objectstorage_compression: gzip
podTemplate: |
  apiVersion: v1
  kind: Pod
  metadata:
    name: placeholder-name
    labels:
      tier: airflow
      component: worker
      release: {{ .Release.Name }}
      {{- if or (.Values.labels) (.Values.workers.labels) }}
        {{- mustMerge .Values.workers.labels .Values.labels | toYaml | nindent 4 }}
      {{- end }}
    annotations:
      {{- toYaml $podAnnotations | nindent 4 }}
      {{- if .Values.workers.kerberosInitContainer.enabled }}
      checksum/kerberos-keytab: {{ include (print $.Template.BasePath "/secrets/kerberos-keytab-secret.yaml") . | sha256sum }}
      {{- end }}
  spec:
    initContainers:
      {{- if and .Values.dags.gitSync.enabled (not .Values.dags.persistence.enabled) }}
        {{- include "git_sync_container" (dict "Values" .Values "is_init" "true" "Template" .Template) | nindent 4 }}
      {{- end }}
      {{- if .Values.workers.extraInitContainers }}
        {{- tpl (toYaml .Values.workers.extraInitContainers) . | nindent 4 }}
      {{- end }}
      {{- if and (semverCompare ">=2.8.0" .Values.airflowVersion) .Values.workers.kerberosInitContainer.enabled }}
      - name: kerberos-init
        image: {{ template "airflow_image" . }}
        imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
        args: ["kerberos", "-o"]
        resources: {{- toYaml .Values.workers.kerberosInitContainer.resources | nindent 8 }}
        volumeMounts:
          - name: logs
            mountPath: {{ template "airflow_logs" . }}
          {{- include "airflow_config_mount" . | nindent 8 }}
          - name: config
            mountPath: {{ .Values.kerberos.configPath | quote }}
            subPath: krb5.conf
            readOnly: true
          - name: kerberos-keytab
            subPath: "kerberos.keytab"
            mountPath: {{ .Values.kerberos.keytabPath | quote }}
            readOnly: true
          - name: kerberos-ccache
            mountPath: {{ .Values.kerberos.ccacheMountPath | quote }}
            readOnly: false
          {{- if .Values.volumeMounts }}
            {{- toYaml .Values.volumeMounts | nindent 8 }}
          {{- end }}
          {{- if .Values.workers.extraVolumeMounts }}
            {{- tpl (toYaml .Values.workers.extraVolumeMounts) . | nindent 8 }}
          {{- end }}
          {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
            {{- include "airflow_webserver_config_mount" . | nindent 8 }}
          {{- end }}
        envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 6 }}
        env:
          - name: KRB5_CONFIG
            value:  {{ .Values.kerberos.configPath | quote }}
          - name: KRB5CCNAME
            value:  {{ include "kerberos_ccache_path" . | quote }}
          {{- include "custom_airflow_environment" . | indent 6 }}
          {{- include "standard_airflow_environment" . | indent 6 }}
      {{- end }}
      - name: install-python-libs
        image: {{ template "airflow_image" . }}
        imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
        command:
          - bash
          - -c
          - |
            pip install --no-cache-dir "apache-airflow-providers-amazon[s3fs]" --target /opt/airflow/custom_packages
        volumeMounts:
          - name: custom-packages
            mountPath: /opt/airflow/custom_packages
    containers:
      - envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 6 }}
        env:
          - name: AIRFLOW__CORE__EXECUTOR
            value: {{ .Values.executor | quote }}
          {{- if or .Values.workers.kerberosSidecar.enabled .Values.workers.kerberosInitContainer.enabled}}
          - name: KRB5_CONFIG
            value:  {{ .Values.kerberos.configPath | quote }}
          - name: KRB5CCNAME
            value:  {{ include "kerberos_ccache_path" . | quote }}
          {{- end }}
          {{- include "standard_airflow_environment" . | indent 6}}
          {{- include "custom_airflow_environment" . | indent 6 }}
          {{- include "container_extra_envs" (list . .Values.workers.env) | indent 6 }}
        image: {{ template "pod_template_image" . }}
        imagePullPolicy: {{ .Values.images.pod_template.pullPolicy }}
        securityContext: {{ $containerSecurityContext | nindent 8 }}
        {{- if $containerLifecycleHooks }}
        lifecycle: {{- tpl (toYaml $containerLifecycleHooks) . | nindent 8 }}
        {{- end }}
        name: base
        {{- if .Values.workers.command }}
        command: {{ tpl (toYaml .Values.workers.command) . | nindent 8 }}
        {{- end }}
        resources: {{- toYaml .Values.workers.resources | nindent 8 }}
        volumeMounts:
          - mountPath: {{ template "airflow_logs" . }}
            name: logs
          {{- include "airflow_config_mount" . | nindent 8 }}
          {{- if or .Values.dags.gitSync.enabled .Values.dags.persistence.enabled }}
            {{- include "airflow_dags_mount" . | nindent 8 }}
          {{- end }}
          {{- if .Values.volumeMounts }}
            {{- toYaml .Values.volumeMounts | nindent 8 }}
          {{- end }}
          {{- if .Values.workers.extraVolumeMounts }}
            {{- tpl (toYaml .Values.workers.extraVolumeMounts) . | nindent 8 }}
          {{- end }}
          {{- if .Values.kerberos.enabled }}
          - name: kerberos-keytab
            subPath: "kerberos.keytab"
            mountPath: {{ .Values.kerberos.keytabPath | quote }}
            readOnly: true
          - name: config
            mountPath: {{ .Values.kerberos.configPath | quote }}
            subPath: krb5.conf
            readOnly: true
          - name: kerberos-ccache
            mountPath: {{ .Values.kerberos.ccacheMountPath | quote }}
            readOnly: true
          {{- end }}
      {{- if .Values.workers.kerberosSidecar.enabled }}
      - name: worker-kerberos
        image: {{ template "airflow_image" . }}
        imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
        securityContext: {{ $containerSecurityContextKerberosSidecar | nindent 8 }}
        {{- if $containerLifecycleHooksKerberosSidecar }}
        lifecycle: {{- tpl (toYaml $containerLifecycleHooksKerberosSidecar) . | nindent 8 }}
        {{- end }}
        args: ["kerberos"]
        resources: {{- toYaml .Values.workers.kerberosSidecar.resources | nindent 8 }}
        volumeMounts:
          - name: logs
            mountPath: {{ template "airflow_logs" . }}
          {{- include "airflow_config_mount" . | nindent 8 }}
          - name: config
            mountPath: {{ .Values.kerberos.configPath | quote }}
            subPath: krb5.conf
            readOnly: true
          - name: kerberos-keytab
            subPath: "kerberos.keytab"
            mountPath: {{ .Values.kerberos.keytabPath | quote }}
            readOnly: true
          - name: kerberos-ccache
            mountPath: {{ .Values.kerberos.ccacheMountPath | quote }}
            readOnly: false
          {{- if .Values.volumeMounts }}
            {{- toYaml .Values.volumeMounts | nindent 8 }}
          {{- end }}
          {{- if .Values.workers.extraVolumeMounts }}
            {{- tpl (toYaml .Values.workers.extraVolumeMounts) . | nindent 8 }}
          {{- end }}
          {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
            {{- include "airflow_webserver_config_mount" . | nindent 8 }}
          {{- end }}
        envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 6 }}
        env:
          - name: KRB5_CONFIG
            value:  {{ .Values.kerberos.configPath | quote }}
          - name: KRB5CCNAME
            value:  {{ include "kerberos_ccache_path" . | quote }}
          {{- include "custom_airflow_environment" . | indent 6 }}
          {{- include "standard_airflow_environment" . | indent 6 }}
      {{- end }}
      {{- if .Values.workers.extraContainers }}
        {{- tpl (toYaml .Values.workers.extraContainers) . | nindent 4 }}
      {{- end }}
    {{- if .Values.workers.priorityClassName }}
    priorityClassName: {{ .Values.workers.priorityClassName }}
    {{- end }}
    {{- if .Values.workers.runtimeClassName }}
    runtimeClassName: {{ .Values.workers.runtimeClassName }}
    {{- end }}
    {{- if or .Values.registry.secretName .Values.registry.connection }}
    imagePullSecrets:
      - name: {{ template "registry_secret" . }}
    {{- end }}
    {{- if .Values.workers.hostAliases }}
    hostAliases: {{- toYaml .Values.workers.hostAliases | nindent 4 }}
    {{- end }}
    restartPolicy: Never
    securityContext: {{ $securityContext | nindent 4 }}
    nodeSelector: {{- toYaml $nodeSelector | nindent 4 }}
    affinity: {{- toYaml $affinity | nindent 4 }}
    {{- if .Values.schedulerName }}
    schedulerName: {{ .Values.schedulerName }}
    {{- end }}
    terminationGracePeriodSeconds: {{ .Values.workers.terminationGracePeriodSeconds }}
    tolerations: {{- toYaml $tolerations | nindent 4 }}
    topologySpreadConstraints: {{- toYaml $topologySpreadConstraints | nindent 4 }}
    serviceAccountName: {{ include "worker.serviceAccountName" . }}
    volumes:
    {{- if .Values.dags.persistence.enabled }}
    - name: dags
      persistentVolumeClaim:
        claimName: {{ template "airflow_dags_volume_claim" . }}
    {{- else if .Values.dags.gitSync.enabled }}
    - name: dags
      emptyDir: {{- toYaml (default (dict) .Values.dags.gitSync.emptyDirConfig) | nindent 6 }}
    {{- end }}
    {{- if .Values.logs.persistence.enabled }}
    - name: logs
      persistentVolumeClaim:
        claimName: {{ template "airflow_logs_volume_claim" . }}
    {{- else }}
    - emptyDir: {{- toYaml (default (dict) .Values.logs.emptyDirConfig) | nindent 6 }}
      name: logs
    {{- end }}
    {{- if and  .Values.dags.gitSync.enabled  .Values.dags.gitSync.sshKeySecret }}
      {{- include "git_sync_ssh_key_volume" . | nindent 2 }}
    {{- end }}
    - configMap:
        name: {{ include "airflow_config" . }}
      name: config
    {{- if and (or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName) (or .Values.workers.kerberosInitContainer.enabled .Values.workers.kerberosSidecar.enabled)}}
    - name: webserver-config
      configMap:
        name: {{ template "airflow_webserver_config_configmap_name" . }}
    {{- end }}
    {{- if .Values.volumes }}
      {{- toYaml .Values.volumes | nindent 2 }}
    {{- end }}
    {{- if .Values.kerberos.enabled }}
    - name: kerberos-keytab
      secret:
        secretName: {{ include "kerberos_keytab_secret" . | quote }}
    - name: kerberos-ccache
      emptyDir: {}
    {{- end }}
    {{- if .Values.workers.extraVolumes }}
      {{- tpl (toYaml .Values.workers.extraVolumes) . | nindent 2 }}
    {{- end }}
statsd:
  enabled: true
  extraMappings:
    # === Counters ===
    - match: (.+)\.(.+)_start$
      match_metric_type: counter
      name: af_agg_job_start
      match_type: regex
      labels:
        airflow_id: $1
        job_name: $2
    - match: (.+)\.(.+)_end$
      match_metric_type: counter
      name: af_agg_job_end
      match_type: regex
      labels:
        airflow_id: $1
        job_name: $2
    - match: (.+)\.operator_failures_(.+)$
      match_metric_type: counter
      name: af_agg_operator_failures
      match_type: regex
      labels:
        airflow_id: $1
        operator_name: $2
    - match: (.+)\.operator_successes_(.+)$
      match_metric_type: counter
      name: af_agg_operator_successes
      match_type: regex
      labels:
        airflow_id: $1
        operator_name: $2
    - match: "*.ti_failures"
      match_metric_type: counter
      name: af_agg_ti_failures
      labels:
        airflow_id: $1
    - match: "*.ti_successes"
      match_metric_type: counter
      name: af_agg_ti_successes
      labels:
        airflow_id: $1
    - match: "*.zombies_killed"
      match_metric_type: counter
      name: af_agg_zombies_killed
      labels:
        airflow_id: $1
    - match: "*.scheduler_heartbeat"
      match_metric_type: counter
      name: af_agg_scheduler_heartbeat
      labels:
        airflow_id: $1
    - match: "*.dag_processing.processes"
      match_metric_type: counter
      name: af_agg_dag_processing_processes
      labels:
        airflow_id: $1
    - match: "*.scheduler.tasks.killed_externally"
      match_metric_type: counter
      name: af_agg_scheduler_tasks_killed_externally
      labels:
        airflow_id: $1
    - match: "*.scheduler.tasks.running"
      match_metric_type: counter
      name: af_agg_scheduler_tasks_running
      labels:
        airflow_id: $1
    - match: "*.scheduler.tasks.starving"
      match_metric_type: counter
      name: af_agg_scheduler_tasks_starving
      labels:
        airflow_id: $1
    - match: "*.scheduler.orphaned_tasks.cleared"
      match_metric_type: counter
      name: af_agg_scheduler_orphaned_tasks_cleared
      labels:
        airflow_id: $1
    - match: "*.scheduler.orphaned_tasks.adopted"
      match_metric_type: counter
      name: af_agg_scheduler_orphaned_tasks_adopted
      labels:
        airflow_id: $1
    - match: "*.scheduler.critical_section_busy"
      match_metric_type: counter
      name: af_agg_scheduler_critical_section_busy
      labels:
        airflow_id: $1
    - match: "*.sla_email_notification_failure"
      match_metric_type: counter
      name: af_agg_sla_email_notification_failure
      labels:
        airflow_id: $1
    - match: "*.ti.start.*.*"
      match_metric_type: counter
      name: af_agg_ti_start
      labels:
        airflow_id: $1
        dag_id: $2
        task_id: $3
    - match: "*.ti.finish.*.*.*"
      match_metric_type: counter
      name: af_agg_ti_finish
      labels:
        airflow_id: $1
        dag_id: $2
        task_id: $3
        state: $4
    - match: "*.dag.callback_exceptions"
      match_metric_type: counter
      name: af_agg_dag_callback_exceptions
      labels:
        airflow_id: $1
    - match: "*.celery.task_timeout_error"
      match_metric_type: counter
      name: af_agg_celery_task_timeout_error
      labels:
        airflow_id: $1
    # === Gauges ===
    - match: "*.dagbag_size"
      match_metric_type: gauge
      name: af_agg_dagbag_size
      labels:
        airflow_id: $1
    - match: "*.dag_processing.import_errors"
      match_metric_type: gauge
      name: af_agg_dag_processing_import_errors
      labels:
        airflow_id: $1
    - match: "*.dag_processing.total_parse_time"
      match_metric_type: gauge
      name: af_agg_dag_processing_total_parse_time
      labels:
        airflow_id: $1
    - match: "*.dag_processing.last_runtime.*"
      match_metric_type: gauge
      name: af_agg_dag_processing_last_runtime
      labels:
        airflow_id: $1
        dag_file: $2
    - match: "*.dag_processing.last_run.seconds_ago.*"
      match_metric_type: gauge
      name: af_agg_dag_processing_last_run_seconds
      labels:
        airflow_id: $1
        dag_file: $2
    - match: "*.dag_processing.processor_timeouts"
      match_metric_type: gauge
      name: af_agg_dag_processing_processor_timeouts
      labels:
        airflow_id: $1
    - match: "*.executor.open_slots"
      match_metric_type: gauge
      name: af_agg_executor_open_slots
      labels:
        airflow_id: $1
    - match: "*.executor.queued_tasks"
      match_metric_type: gauge
      name: af_agg_executor_queued_tasks
      labels:
        airflow_id: $1
    - match: "*.executor.running_tasks"
      match_metric_type: gauge
      name: af_agg_executor_running_tasks
      labels:
        airflow_id: $1
    - match: "*.pool.open_slots.*"
      match_metric_type: gauge
      name: af_agg_pool_open_slots
      labels:
        airflow_id: $1
        pool_name: $2
    - match: "*.pool.queued_slots.*"
      match_metric_type: gauge
      name: af_agg_pool_queued_slots
      labels:
        airflow_id: $1
        pool_name: $2
    - match: "*.pool.running_slots.*"
      match_metric_type: gauge
      name: af_agg_pool_running_slots
      labels:
        airflow_id: $1
        pool_name: $2
    - match: "*.pool.starving_tasks.*"
      match_metric_type: gauge
      name: af_agg_pool_starving_tasks
      labels:
        airflow_id: $1
        pool_name: $2
    - match: "*.smart_sensor_operator.poked_tasks"
      match_metric_type: gauge
      name: af_agg_smart_sensor_operator_poked_tasks
      labels:
        airflow_id: $1
    - match: "*.smart_sensor_operator.poked_success"
      match_metric_type: gauge
      name: af_agg_smart_sensor_operator_poked_success
      labels:
        airflow_id: $1
    - match: "*.smart_sensor_operator.poked_exception"
      match_metric_type: gauge
      name: af_agg_smart_sensor_operator_poked_exception
      labels:
        airflow_id: $1
    - match: "*.smart_sensor_operator.exception_failures"
      match_metric_type: gauge
      name: af_agg_smart_sensor_operator_exception_failures
      labels:
        airflow_id: $1
    - match: "*.smart_sensor_operator.infra_failures"
      match_metric_type: gauge
      name: af_agg_smart_sensor_operator_infra_failures
      labels:
        airflow_id: $1
    # === Timers ===
    - match: "*.dagrun.dependency-check.*"
      match_metric_type: observer
      name: af_agg_dagrun_dependency_check
      labels:
        airflow_id: $1
        dag_id: $2
    - match: "*.dag.*.*.duration"
      match_metric_type: observer
      name: af_agg_dag_task_duration
      labels:
        airflow_id: $1
        dag_id: $2
        task_id: $3
    - match: "*.dag_processing.last_duration.*"
      match_metric_type: observer
      name: af_agg_dag_processing_duration
      labels:
        airflow_id: $1
        dag_file: $2
    - match: "*.dagrun.duration.success.*"
      match_metric_type: observer
      name: af_agg_dagrun_duration_success
      labels:
        airflow_id: $1
        dag_id: $2
    - match: "*.dagrun.duration.failed.*"
      match_metric_type: observer
      name: af_agg_dagrun_duration_failed
      labels:
        airflow_id: $1
        dag_id: $2
    - match: "*.dagrun.schedule_delay.*"
      match_metric_type: observer
      name: af_agg_dagrun_schedule_delay
      labels:
        airflow_id: $1
        dag_id: $2
    - match: "*.scheduler.critical_section_duration"
      match_metric_type: observer
      name: af_agg_scheduler_critical_section_duration
      labels:
        airflow_id: $1
    - match: "*.dagrun.*.first_task_scheduling_delay"
      match_metric_type: observer
      name: af_agg_dagrun_first_task_scheduling_delay
      labels:
        airflow_id: $1
        dag_id: $2
